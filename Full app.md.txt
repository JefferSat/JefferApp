package com.sensors.sat;

import ioio.lib.api.AnalogInput;
import ioio.lib.api.DigitalOutput;
import ioio.lib.api.Uart;
import ioio.lib.api.exception.ConnectionLostException;
import ioio.lib.util.BaseIOIOLooper;
import ioio.lib.util.IOIOLooper;
import ioio.lib.util.android.IOIOActivity;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.lang.Thread.UncaughtExceptionHandler;
import java.lang.reflect.Method;
import java.nio.ByteBuffer;
import java.text.DateFormat;
import java.util.Date;

import android.annotation.SuppressLint;
import android.app.AlarmManager;
import android.app.Notification;
import android.app.NotificationManager;
import android.app.PendingIntent;
import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.Intent;
import android.content.IntentFilter;
import android.hardware.Camera;
import android.hardware.Camera.AutoFocusCallback;
import android.hardware.Camera.PictureCallback;
import android.hardware.Camera.ShutterCallback;
import android.hardware.Sensor;
import android.hardware.SensorEvent;
import android.hardware.SensorEventListener;
import android.hardware.SensorManager;
import android.location.Location;
import android.location.LocationListener;
import android.location.LocationManager;
import android.media.MediaScannerConnection;
import android.os.BatteryManager;
import android.os.Bundle;
import android.os.Environment;
import android.os.PowerManager;
import android.os.PowerManager.WakeLock;
import android.util.Log;
import android.view.Menu;
import android.view.SurfaceView;
import android.view.View;
import android.view.ViewGroup;
import android.view.ViewGroup.LayoutParams;
import android.view.WindowManager;
import android.widget.TextView;

public class MainActivity extends IOIOActivity  {
	private UncaughtExceptionHandler defaultUEH;
    private TextView mLatLng;
    private TextView mBgSpdAlt;
    private TextView mLight;
    private TextView mGrav;
    private TextView mMag;
    private TextView mGyro;
    private TextView mLED;
    private TextView mBatt;
    public String extSat;
    public String satSignal;
    private LocationManager locationManager;
    private SensorManager mSensorManager;
    private PowerManager mPowerManager;
    private WakeLock mWakeLock;
    public boolean started = false;
    public boolean firstStart = true;
    public double lat;
    public double sending = 0;
    public double lng;
    public double light;
    public double speed;
    public double mph;
    public double bearing;
    //private Intent servIntent;
    public double alt;
    public double gravX;
    public double gravY;
    public double gravZ;
    public double magX;
    public double magY;
    public double magZ;
    public double gyroX;
    public double gyroY;
    public double gyroZ;
    public double lipo_battery;
    public double thermistor1;
    public double thermistor2;
    public double batt;
    public double pressure;
    public double batteryPct;
    public double identifyingPattern = 3.14;
    public double externalLatitude = 0;
    public double externalLongitude = 0;
    public double externalAltitude = 0;
    private Uart uart;
    private Uart uart2;
    private Uart uart3;
    private InputStream in;
    private OutputStream out;
    private InputStream in2;
    private OutputStream out2;
    private InputStream in3;
    public String b;
    public AnalogInput lipo;
    public AnalogInput therm1;
    public AnalogInput therm2;
    public String temp2;
    public String AT;
    public String read;
	Preview preview;
	Camera camera;
	String fileName;
	private static final String TAG = "CamTestActivity";
	private int numPicsTaken = 0;

	private BroadcastReceiver mBatInfoReceiver = new BroadcastReceiver()
	{
		@Override
		public void onReceive(Context c, Intent i)
		{
			int level = i.getIntExtra(BatteryManager.EXTRA_LEVEL, -1);
	       	int scale = i.getIntExtra(BatteryManager.EXTRA_SCALE, -1);

	       	batteryPct = level / (float)scale * 100;
		}
	};
 
    @SuppressLint("NewApi")
    @Override
    public void onCreate(Bundle savedInstanceState) {
       super.onCreate(savedInstanceState);
       setContentView(R.layout.main);
       
       registerReceiver(mBatInfoReceiver, new IntentFilter(Intent.ACTION_BATTERY_CHANGED));
       
       mLatLng = (TextView) findViewById(R.id.latlng);
       mBgSpdAlt = (TextView) findViewById(R.id.bgspdalt);
       mLight = (TextView) findViewById(R.id.light);
       mGrav = (TextView) findViewById(R.id.grav);
       mMag = (TextView) findViewById(R.id.mag);
       mGyro = (TextView) findViewById(R.id.gyro);
       mLED = (TextView) findViewById(R.id.led);
       mBatt = (TextView) findViewById(R.id.batt);
       
       preview = new Preview(this, (SurfaceView)findViewById(R.id.surfaceView));
       preview.setLayoutParams(new LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
       ((ViewGroup) findViewById(R.id.preview)).addView(preview);
       preview.setKeepScreenOn(true);
       
       mPowerManager = (PowerManager) getSystemService(Context.POWER_SERVICE);
       mWakeLock = mPowerManager.newWakeLock(PowerManager.SCREEN_BRIGHT_WAKE_LOCK, getClass().getName());

       LocationManager locationManager = (LocationManager) this.getSystemService(Context.LOCATION_SERVICE);
       locationManager.requestLocationUpdates(LocationManager.GPS_PROVIDER, 0, 0, listener);
       
       mSensorManager = (SensorManager) this.getSystemService(Context.SENSOR_SERVICE);   
       Sensor LightSensor = mSensorManager.getDefaultSensor(Sensor.TYPE_LIGHT);
       mSensorManager.registerListener(mSensorListener, LightSensor, SensorManager.SENSOR_DELAY_NORMAL);
       
       Sensor Gravity = mSensorManager.getDefaultSensor(Sensor.TYPE_GRAVITY);   
       mSensorManager.registerListener(mSensorListener, Gravity, SensorManager.SENSOR_DELAY_NORMAL);       
   
       Sensor MagneticField = mSensorManager.getDefaultSensor(Sensor.TYPE_MAGNETIC_FIELD);   
       mSensorManager.registerListener(mSensorListener, MagneticField, SensorManager.SENSOR_DELAY_NORMAL); 
 
       Sensor GyroScope = mSensorManager.getDefaultSensor(Sensor.TYPE_GYROSCOPE);   
       mSensorManager.registerListener(mSensorListener, GyroScope, SensorManager.SENSOR_DELAY_NORMAL);
       
       Sensor PressureSens = mSensorManager.getDefaultSensor(Sensor.TYPE_PRESSURE);
       mSensorManager.registerListener(mSensorListener, PressureSens, SensorManager.SENSOR_DELAY_NORMAL);
       
       mWakeLock.acquire();
       
       //servIntent = new Intent(this, MainActivityService.class);
       
       //startService(servIntent);
       
       /*WindowManager.LayoutParams params = getWindow().getAttributes();
       params.flags |= LayoutParams.FLAG_KEEP_SCREEN_ON;
       params.screenBrightness = 0;
       getWindow().setAttributes(params);*/
       
     }
    	
	class Looper extends BaseIOIOLooper {
		private DigitalOutput led_;
		private int bufferSize = 128;
		protected void setup() throws ConnectionLostException {
			led_ = ioio_.openDigitalOutput(0, true);
			uart = ioio_.openUart(4, 5, 9600, Uart.Parity.NONE, Uart.StopBits.ONE);
			out = uart.getOutputStream();
			in = uart.getInputStream();
			uart2 = ioio_.openUart(11, 10, 19200, Uart.Parity.NONE, Uart.StopBits.ONE);
			out2 = uart2.getOutputStream();
			in2 = uart2.getInputStream();
			uart3 = ioio_.openUart(27, 28, 9600, Uart.Parity.NONE, Uart.StopBits.ONE);
			in3 = uart3.getInputStream();
			lipo = ioio_.openAnalogInput(38);
			therm1 = ioio_.openAnalogInput(42); //External
			therm2 = ioio_.openAnalogInput(46); //Internal
		}
		

	    public void wait(int ms)
	    {
			try 
			{
				Thread.sleep(ms);	
			} 
			catch (InterruptedException e)
			{
			}
	    }
	    
	    
	    
	    
	    //IOIO Loop
		@Override
		public void loop() throws ConnectionLostException 
		{
			led_.write(false);
			wait(100);
			
			if (started == true && firstStart == true)
			{
				firstStart = false;
				
				//----------------------PICTURE TAKING THREAD -------------------------------------------------------
				new Thread(new Runnable()
		        {

		            public void run()
		            {
		                while (!Thread.interrupted())
		                    try
		                    {
		                    	if (numPicsTaken < 12)
		                    	{
		                    		Thread.sleep(5000); //5 secs for first minute, 30 secs afterward
		                    		numPicsTaken++;
		                    	}
		                    	else
		                    	{
		                    		Thread.sleep(30000); //5 secs for first minute, 30 secs afterward
		                    		numPicsTaken++;
		                    	}
		                        
		                        camera.autoFocus(myAutoFocusCallback); // this action have to be in UI thread
		                    }
		                    catch (InterruptedException e)
		                    {
		                        // ooops
		                    }
		            }
		        }).start();
				
				//--------------------------External GPS Data Capturing-------------------------------
				//getting altitude, latitude and longitude off of $GPGGA
				new Thread(new Runnable()
		        {

		            public void run()
		            {
		                while (!Thread.interrupted())
		                    try
		                    {
		        			
        					Thread.sleep(1000);
		                	
		                	int availableBytes = in3.available();
		                	
		                	byte[] readBuffer = new byte [512];
		  				    in3.read(readBuffer, 0, availableBytes);
		  				    char[] temp = (new String(readBuffer,0, availableBytes)).toCharArray();
		  				    temp2 = new String(temp);
			    	    				  				    
		  				    temp2 = temp2.substring(temp2.indexOf("$GPGGA"), temp2.length());
		  				//  String attempt = "$GPGGA,144945.00,3801.98059,N,07830.65980,W,1,04,3.26,180.1,M,-34.3,M,,*6C";
		                	temp2 = temp2.substring(temp2.indexOf(',') + 1, temp2.length());
		                	temp2 = temp2.substring(temp2.indexOf(',') + 1, temp2.length());
		                	externalLatitude = Double.parseDouble(temp2.substring(0, temp2.indexOf(','))) / 100;
		                	temp2 = temp2.substring(temp2.indexOf(',') + 1, temp2.length());
		                	if (temp2.substring(0, temp2.indexOf(',')).equals("S"))
							{
								externalLatitude = -externalLatitude;
							}
		                	temp2 = temp2.substring(temp2.indexOf(',') + 1, temp2.length());
		                	externalLongitude = Double.parseDouble(temp2.substring(0, temp2.indexOf(','))) / 100;
		                	temp2 = temp2.substring(temp2.indexOf(',') + 1, temp2.length());
		                	if (temp2.substring(0, temp2.indexOf(',')).equals("W"))
							{
								externalLongitude = -externalLongitude;
							}
		                	temp2 = temp2.substring(temp2.indexOf(',') + 1, temp2.length());
		                	temp2 = temp2.substring(temp2.indexOf(',') + 1, temp2.length());
		                	temp2 = temp2.substring(temp2.indexOf(',') + 1, temp2.length());
		                	temp2 = temp2.substring(temp2.indexOf(',') + 1, temp2.length());
		                	externalAltitude = Double.parseDouble(temp2.substring(0, temp2.indexOf(',')));
		        			}
		                catch(Exception e)
	        			{
	        				e.printStackTrace();
	        			} 
	                }
	        	}).start();
				
				//-----------------------RADIO DATA PACKET SENDING AND DATA RECORDING ON PHONE THREAD-----------------------------------
				new Thread(new Runnable()
		        {

		            public void run()
		            {
		                while (!Thread.interrupted())
		                    try
		                    {
		                    	lipo_battery = lipo.read() * 24;
		                    	thermistor1 = (therm1.read() * 100 * 1.8) + 32;
		                    	thermistor2 = (therm2.read() * 100 * 1.8) + 32;
		                    	sendDataPackets();
		                    	try
		                    	{
									WriteToFile(gravX, gravY, gravZ, pressure, light, magX, magY, magZ, gyroX, gyroY, gyroZ);
								}
		                    	catch (IOException e)
		                    	{
									e.printStackTrace();
								}
		                    	Thread.sleep(1000);
		                    }
		                    catch (Exception e)
		                    {
		                        // ooops
		                    }
		            }

		            public void sendDataPackets()
		    	    {
		    	    	writeDataOut(identifyingPattern);
		    	    	writeDataOut(batteryPct);
		    	    	writeDataOut(lat);
		    	    	writeDataOut(lng);
		    	    	writeDataOut(mph);
		    	    	writeDataOut(bearing);
		    	    	writeDataOut(alt);
		    	    	writeDataOut(gravX);
		    	    	writeDataOut(gravY);
		    	    	writeDataOut(gravZ);
		    	    	writeDataOut(pressure);
		    	    	writeDataOut(light);
						writeDataOut(magX);
		    	    	writeDataOut(magY);
		    	    	writeDataOut(magZ);
		    	    	writeDataOut(gyroX);
		    	    	writeDataOut(gyroY);
		    	    	writeDataOut(gyroZ);
		    	    	writeDataOut(lipo_battery);
		    	    	writeDataOut(externalLatitude);
		    	    	writeDataOut(externalLongitude);
		    	    	writeDataOut(externalAltitude);
		    	    	writeDataOut(thermistor1);
		    	    	writeDataOut(thermistor2);
		    	    	//writeDataOut(picData);
		    	    }
		    	    
		            public void writeDataOut(Double dbl)
		        	{
		        		try
		        		{
		        			out.write(doubleToByteArray(dbl));
		        		}
		        		catch (Exception e)
		        		{
		        			//sdf
		        		}
		        	}

		        	public byte[] doubleToByteArray(double value) {
		        	    byte[] bytes = new byte[8];
		        	    ByteBuffer.wrap(bytes).putDouble(value);
		        	    return bytes;
		        	}
		        	
		        	public void WriteToFile(double gravX, double gravY, double gravZ, double pressure, double light, double magX, double magY, double magZ, double gyroX, double gyroY, double gyroZ) throws IOException
		        	{
		        		String timeString = DateFormat.getDateTimeInstance().format(new Date());
		        		
		    	       	File sdCard = Environment.getExternalStorageDirectory();
		    	       	File dir = new File (sdCard.getAbsolutePath() + "/jefferapp");
		    	       	dir.mkdirs();
		    	       	File file = new File(dir, "jeffertest.txt");
		    	       	
		    	       	FileOutputStream fos = new FileOutputStream(file, true);
		    	       	
		    	       	String sensorVal = new String(timeString + ") Battery:" + batteryPct + " InternalLatitude:" + lat + " InternalLongitude:" + lng + " ExternalLatitude:" + externalLatitude + " ExternalLongitude:" + externalLongitude + " ExternalAltitude:" + externalAltitude + " Speed:" + mph + " Bearing:" + bearing + " Altitude:" + alt + " GravX:" + gravX + " GravY:" + gravY + " GravZ:" + gravZ);
		    	       	sensorVal += " Pressure:" + pressure + " Light:" + light + " MagX:" + magX + " MagY:" + magY + " magZ:" + magZ + " GyroX:" + gyroX + " GyroY:" + gyroY + " GyroZ:" + gyroZ + " Thermistor1:" + thermistor1 + " Thermistor2:" + thermistor2 + "\r\n"; 
		    	       	
		    	       	fos.write(sensorVal.getBytes());
		    	       	fos.close();
		    	    		
		    	    	MediaScannerConnection.scanFile(getApplicationContext(), new String[] { file.getAbsolutePath() }, null, null);
		           }
		        }).start();
				
				//--------------------------Satellite Data Sending Thread-------------------------------
				new Thread(new Runnable()
		        {

		            public void run()
		            {
		                while (!Thread.interrupted())
		                {
		                	try
		        			{
		                		extSat = "unsent";
		                		
        					Thread.sleep(1000000);
        					AT="AT+CSQ";
        					out2.write(AT.getBytes());
        					out2.write(13);
        					
        					
		                	
		                	int availableBytes = in2.available();
		                	
		                	byte[] readBuffer = new byte [bufferSize];
		  				    in2.read(readBuffer, 0, availableBytes);
		  				    char[] temp = (new String(readBuffer,0, availableBytes)).toCharArray();
		  				    temp2 = new String(temp);
		  				    
		  				    satSignal = "First:" + availableBytes + " " + temp2 + " " + availableBytes;
		                	
		                	if(temp2.contains("+CSQ:3") || temp2.contains("+CSQ:4") || temp2.contains("+CSQ:5"))
							  {
                				Thread.sleep(3000);
								  String AT = "AT+SBDWT=Coordinates: " + Math.round(externalLatitude * 100) / 100 + ", " + Math.round(externalLongitude * 100) / 100;
								  out2.write(AT.getBytes());
								  out2.write(13);
								  
								  availableBytes = in2.available();
				                	
				                	readBuffer = new byte [bufferSize];
				  				    in2.read(readBuffer, 0, availableBytes);
				  				    temp = (new String(readBuffer,0, availableBytes)).toCharArray();
				  				    temp2 = new String(temp);
				  				    
				  				    satSignal = "Second:" + temp2; //What?
				  				    
								  String ATB = "AT+SBDIX";
								   out2.write(ATB.getBytes());
								   out2.write(13);
								   extSat = "sent"; //TODO: Does this work?
								   
								   availableBytes = in2.available();
								   
								   readBuffer = new byte [bufferSize];
				  				    in2.read(readBuffer, 0, availableBytes);
				  				    temp = (new String(readBuffer,0, availableBytes)).toCharArray();
				  				    temp2 = new String(temp);
				  				    
				  				    satSignal = "Third:" + temp2; //What?
								   
								  Thread.sleep(1500000);			    
							  }
		        			}
		                	catch(Exception e)
		        			{
		        				e.printStackTrace();
		        			} 
		                }
		            }
		        }).start();
			}
			else
			{
				//TODO: Breaking down picture data and sending data

				//in is the command we send from the computer
				//out is the result we get from the modem
				/*UART Communications - Radio Modem */
				try
				{
					
					try
					{
						lipo_battery = lipo.read() * 24;
						thermistor1 = (therm1.read() * 100 * 1.8) + 32;
                    	thermistor2 = (therm2.read() * 100 * 1.8) + 32;
					}
		        	
		        	catch (InterruptedException e1) {
						
						e1.printStackTrace();
					}
				  int availableBytes = in.available();
				  if(in.available()>0)
				  {
					  byte[] readBuffer = new byte [bufferSize];
					  in.read(readBuffer, 0, availableBytes);
					  char[] temp = (new String(readBuffer,0, availableBytes)).toCharArray();
					  temp2 = new String(temp);
				
					  if(temp2.contains("lgt"))
					  {
						 String lit = "Light Sensor: " + light;
						 out.write(lit.getBytes());
						 out.write(13);
						  
					  }
					  
					  if (temp2.contains("lpo"))
					  {
						  String lipobattery = "Lipo Battery: " + lipo_battery;
						  out.write(lipobattery.getBytes());
						  out.write(13);
					  }
					  
					  if (temp2.contains("thm"))
					  {
						  String therm = "Therm 1: " + thermistor1 + "Therm 2:" + thermistor2;
						  out.write(therm.getBytes());
						  out.write(13);
					  }
					  
					  if(temp2.contains("bat"))
					  {
						 String battery = "Battery: " + batt + "V";
						 out.write(battery.getBytes());
						 out.write(13);  
					  }
					  
					  if(temp2.contains("gps"))
					  {
						 String latlng = "Lat: " + lat + " Long: " + lng;
						 out.write(latlng.getBytes());
						 out.write(13);
						 String bng = "Bearing: " + bearing;
						 out.write(bng.getBytes());
						 out.write(13);
						 String sped = "Speed: " + speed;
						 out.write(sped.getBytes());
						 out.write(13);
						 String altitude = "Altitude: " + alt;
						 out.write(altitude.getBytes());
						 out.write(13);
						 
					  }
					  
					  if(temp2.contains("grv"))
					  {
						 String gravity = "Gravity: ";
						 out.write(gravity.getBytes());
						 out.write(13);
						 String gvx = "X: " + gravX;
						 out.write(gvx.getBytes());
						 out.write(13);
						 String gvy = "Y: " + gravY;
						 out.write(gvy.getBytes());
						 out.write(13);
						 String gvz = "Z: " + gravZ;
						 out.write(gvz.getBytes());
						 out.write(13);
					  }
					  
					  if (temp2.contains("stt"))
					  {
						  started = true;
					  }
					  
					  if(temp2.contains("mag"))
					  {
						 String magnet = "Magnetometer: ";
						 out.write(magnet.getBytes());
						 out.write(13);
						 String mgx = "X: " + magX;
						 out.write(mgx.getBytes());
						 out.write(13);
						 String mgy = "Y: " + magY;
						 out.write(mgy.getBytes());
						 out.write(13);
						 String mgz = "Z: " + magZ;
						 out.write(mgz.getBytes());
						 out.write(13);
					  }
					  
					  if(temp2.contains("gyo"))
					  {
						 String gyroscope = "Gyro: ";
						 out.write(gyroscope.getBytes());
						 out.write(13);
						 String gyx = "X: " + gyroX;
						 out.write(gyx.getBytes());
						 out.write(13);
						 String gyy = "Y: " + gyroY;
						 out.write(gyy.getBytes());
						 out.write(13);
						 String gyz = "Z: " + gyroZ;
						 out.write(gyz.getBytes());
						 out.write(13);
					  }
					  if (temp2.contains("sat"))
					  {
						  String message = "AT+SBDWT=X:" + (int)gyroX + " Y:" + (int)gyroY + " Z:" + (int)gyroZ;
						  
			 			  out2.write(message.getBytes());
			 			  wait(2000);
			 			  out2.write(13);
			 			  wait(2000);
			 			  byte[] buffer1 = new byte [in2.available()];
			 			  in2.read(buffer1, 0, in2.available());
			 			  wait(2000);
			 			  out.write("1:".getBytes());
			 			  out.write(buffer1);
			 			  
			 			  out2.write("AT+SBDIX".getBytes());
			 			 wait(2000);
			 			  out2.write(13);
			 			 wait(2000);
			 			  buffer1 = new byte [in2.available()];
			 			  in2.read(buffer1, 0, in2.available());
			 			 wait(2000);
			 			 out.write("2:".getBytes());
			 			  out.write(buffer1);
					  } 
				  }
				}

				catch(IOException e)
				{
					e.printStackTrace();
				}
			}
		}
	}


	@Override
	protected IOIOLooper createIOIOLooper() {
		return new Looper();
	}
	
	
    private final LocationListener listener = new LocationListener() {

        @Override
        public void onLocationChanged(Location location) {
        	lat = location.getLatitude();
        	lng = location.getLongitude();
        	speed = location.getSpeed();
        	bearing = location.getBearing();
        	alt = location.getAltitude();
        	mph = (speed * 3.2808399*3600) / 5280;
            mLatLng.setText("Lat: "+ lat + "\n" + "Long: " + lng); 
            mBgSpdAlt.setText("Bearing: " + bearing + "\n" + "Speed(m/s): " + speed + "\n" + " Altitude(m): " + alt);

        }

        @Override
        public void onProviderDisabled(String provider) {
        }

        @Override
        public void onProviderEnabled(String provider) {
        }

        @Override
        public void onStatusChanged(String provider, int status, Bundle extras) {
        }
    };
     
    @Override
    protected void onResume() {
        super.onResume();
        
        camera = Camera.open();
		camera.startPreview();
		preview.setCamera(camera);
    }
    
    @Override
    protected void onDestroy() {
        super.onDestroy();
        
       // stopService(servIntent);
    }
    
    private void resetCam() {
		camera.startPreview();
		preview.setCamera(camera);
	}
    
    ShutterCallback shutterCallback = new ShutterCallback() {
		public void onShutter() {
			// Log.d(TAG, "onShutter'd");
		}
	};

	PictureCallback rawCallback = new PictureCallback() {
		public void onPictureTaken(byte[] data, Camera camera) {
			// Log.d(TAG, "onPictureTaken - raw");
		}
	};

	PictureCallback jpegCallback = new PictureCallback() {
		public void onPictureTaken(byte[] data, Camera camera) {
			try {
				
				File sdCard = Environment.getExternalStorageDirectory();
		       	File dir = new File (sdCard.getAbsolutePath() + "/jefferapp");
		       	dir.mkdirs();
		       	String timeString = DateFormat.getDateTimeInstance().format(new Date());
		       	File file = new File(dir, timeString + ".jpg");
		       	
		       	FileOutputStream fos2 = new FileOutputStream(file, true);
				fos2.write(data);
				fos2.close();
				MediaScannerConnection.scanFile(getApplicationContext(), new String[] { file.getAbsolutePath() }, null, null);
				Log.d(TAG, "onPictureTaken - wrote bytes: " + data.length);

				resetCam();

			} catch (FileNotFoundException e) {
				e.printStackTrace();
			} catch (IOException e) {
				e.printStackTrace();
			} finally {
			}
			Log.d(TAG, "onPictureTaken - jpeg");
		}
	};
	
	AutoFocusCallback myAutoFocusCallback = new AutoFocusCallback(){

	  public void onAutoFocus(boolean arg0, Camera arg1) {
		  arg1.takePicture(shutterCallback, rawCallback, jpegCallback);
	  }};
	  
	   ShutterCallback myShutterCallback = new ShutterCallback(){
	
	  public void onShutter() {
	   
	  }};
    
    protected void onStop() {
        super.onStop();
        locationManager.removeUpdates(listener);
        mSensorManager.unregisterListener(mSensorListener); 
        mWakeLock.release();
    }
    
    protected void onPause() {
    	  	
    }

    public void onClick(View view) {
        
      }
  
    @Override
    public boolean onCreateOptionsMenu(Menu menu) {
        getMenuInflater().inflate(R.menu.main, menu);
        return true;
    }
    
    private final SensorEventListener mSensorListener = new SensorEventListener() {
    
    	@Override
    	public void onAccuracyChanged(Sensor sensor, int accuracy) {

	}

    	@Override
    	public void onSensorChanged(SensorEvent event) {
    	Sensor sensor = event.sensor;
    	if(sensor.getType() == Sensor.TYPE_LIGHT) {
		  light = event.values[0];
		  mLight.setText("\n"+ "Light Sensor: " + light);
	

    	}
    	else if(sensor.getType() == Sensor.TYPE_GRAVITY) {
    	  gravX = event.values[0];
    	  gravY = event.values[1];
    	  gravZ = event.values[2];
    	  mGrav.setText("\n" + "Grav X: " + gravX + "\n" + "Grav Y: " + gravY +"\n" + "Grav Z: " + gravZ);
    	
    	}
    	else if(sensor.getType() == Sensor.TYPE_MAGNETIC_FIELD) {
      	  magX = event.values[0];
      	  magY = event.values[1];
      	  magZ = event.values[2];

      	  mMag.setText("\n" + "Mag X: " + extSat + "\n" + "Mag Y: " + satSignal + "\n" + "Mag Z: " + magZ);
      	  mBatt.setText("Battery: " + lipo_battery + "V" + "\n");
      	} 
    	else if(sensor.getType() == Sensor.TYPE_GYROSCOPE) {
    	  gyroX = event.values[0];
          gyroY = event.values[1];
          gyroZ = event.values[2];
    	  mLED.setText("\n" + "Radio Modem: " + temp2);
          mGyro.setText("\n" + "Gyro X: " + gyroX + "\n" + "Gyro Y: " + gyroY + "\n" + "Gyro Z: " + gyroZ);
    	}
    	else if(sensor.getType() == Sensor.TYPE_PRESSURE) {
      	  pressure = event.values[0];
      	}
    	/*try
		{
    		float thermistor = 0;
    		WriteToFile(gravX, gravY, gravZ, pressure, light, magX, magY, magZ, gyroX, gyroY, gyroZ, thermistor);
		}
		catch (IOException e)
		{
		 //This shoudn't hapen
		}*/
	}	
	};
	
    private Thread.UncaughtExceptionHandler _unCaughtExceptionHandler = new Thread.UncaughtExceptionHandler() 
    {
    	public void uncaughtException(Thread thread, Throwable ex)
    	{
            PendingIntent myActivity = PendingIntent.getActivity(getBaseContext(), 1, 
                    new Intent(getBaseContext(), StartedActivity.class), PendingIntent.FLAG_ONE_SHOT);

            AlarmManager alarmManager = (AlarmManager)getSystemService(Context.ALARM_SERVICE);
            alarmManager.set(AlarmManager.ELAPSED_REALTIME_WAKEUP, 
                    15000, myActivity );
    		System.exit(2);
    		defaultUEH.uncaughtException(thread, ex);
    	}
    	
    };
    
    public MainActivity()
    {
        defaultUEH = Thread.getDefaultUncaughtExceptionHandler();

        Thread.setDefaultUncaughtExceptionHandler(_unCaughtExceptionHandler);
    }
}












/*	Sat Modem Communications
 

 			  if(temp2.contains("+CSQ:3") || temp2.contains("+CSQ:4") || temp2.contains("+CSQ:5"))
 
		  {
			j=2;
			if(i == 0)
			{
			  wait(3000);
			  /*String AT = "AT+SBDWT=Light: " + light;
			  out.write(AT.getBytes());
			  out.write(13);
			  wait(2000);
			  String ATB = "AT+SBDIX";
			   out.write(ATB.getBytes());
			   out.write(13);
			   i++;
			   j++;
			


			}
		     
		  }
		  
		  if(temp2.contains("+SBDIX: 0") || temp2.contains("+SBDIX: 1") || temp2.contains("+SBDIX: 2") || temp2.contains("SBDRING"))
		  {
			 if (i==1) 
			 {
			  wait(2000);
			  String ATC = "AT+SBDRT";
			  out.write(ATC.getBytes());
			  out.write(13);
			  i++;
	
		/*			try
			{
				if(j<1)
				{
					wait(2000);
					AT="AT+CSQ";
					out.write(AT.getBytes());
					out.write(13);
		
				}
				
			}
			catch(IOException e)
			{
				e.printStackTrace();
			} /*
			 }	  
		  }/*
		/*
		  if(temp2.contains("light"))
		  {
			  String AT = "AT+SBDWT=Light: " + light;
			  out.write(AT.getBytes());
			  out.write(13);
			  i++;
		  }
		  if(i==3)
		  {
			  String AT = "AT+SBDIX";
			  out.write(AT.getBytes());
			  out.write(13);
			  i++;					  
		  }
		*/
	  
